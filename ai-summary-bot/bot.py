import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.client.default import DefaultBotProperties
from sqlalchemy import select
from db import SessionLocal, MessageModel  # —Ç–≤–æ—è SQLAlchemy –º–æ–¥–µ–ª—å
import openai

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–ª—é—á—ñ
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ë–î
def save_message_to_db(msg: Message):
    with SessionLocal() as session:
        db_msg = MessageModel(
            chat_id=msg.chat.id,
            user_id=msg.from_user.id if msg.from_user else None,
            username=msg.from_user.username if msg.from_user else None,
            text=msg.text
        )
        session.add(db_msg)
        session.commit()


# –í–∏—Ç—è–≥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

def get_recent_messages(chat_id: int, limit: int = 20):
    with SessionLocal() as session:
        stmt = (
            select(MessageModel)
            .where(MessageModel.chat_id == chat_id)
            .order_by(MessageModel.timestamp.desc())
            .limit(limit)
        )
        return list(reversed(session.scalars(stmt).all()))


@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫ —ñ –ø—ñ–¥—Å—É–º–∫—ñ–≤. –ù–∞–ø–∏—à–∏ —â–æ—Å—å –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ /summary")


@dp.message(Command("summary"))
async def summary_handler(message: Message):
    logger.info(f"–ó–∞–ø–∏—Ç /summary —É —á–∞—Ç—ñ {message.chat.id}")

    try:
        recent = get_recent_messages(chat_id=message.chat.id, limit=20)
        if not recent:
            await message.answer("üì≠ –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Ä–µ–∑—é–º–µ.")
            return

        text_block = "\n".join([msg.text for msg in recent if msg.text])
        prompt = (
            "–ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–µ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–µ —Ä–µ–∑—é–º–µ —Ü–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:\n\n"
            + text_block
        )

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.5,
        )

        summary = response.choices[0].message.content.strip()
        await message.answer(f"üìã <b>Summary:</b>\n{summary}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ summary_handler: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–µ–∑—é–º–µ.")


@dp.message(F.text)
async def echo_and_store(message: Message):
    logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message.text}")
    save_message_to_db(message)
    await message.reply(message.text)


async def main():
    logger.info("üöÄ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É—î...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

    import asyncio
    asyncio.run(main())
