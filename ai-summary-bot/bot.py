import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.markdown import hbold
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
weekly_messages = []

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω–∏ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=types.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def save_message(message: Message):
    weekly_messages.append((message.from_user.full_name, message.text, datetime.now()))

# –§—ñ–ª—å—Ç—Ä —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message(F.text)
async def handle_message(message: Message):
    if message.chat.type in ["group", "supergroup"]:
        save_message(message)
        logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message.text}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É /summary
@dp.message(commands=["summary"])
async def send_summary(message: Message):
    await message.answer(generate_summary())

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥—Å—É–º–∫—É
def generate_summary():
    if not weekly_messages:
        return "üîï –ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å."

    summary_lines = [f"<b>{name}:</b> {text}" for name, text, _ in weekly_messages]
    return "<b>üóì –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å:</b>\n\n" + "\n".join(summary_lines)

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def clear_old_messages():
    now = datetime.now()
    week_ago = now - timedelta(days=7)
    global weekly_messages
    weekly_messages = [(u, t, ts) for u, t, ts in weekly_messages if ts >= week_ago]

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫ —â–æ–ø‚Äô—è—Ç–Ω–∏—Ü—ñ –æ 18:00
def setup_scheduler():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        auto_send_summary,
        trigger="cron",
        day_of_week="fri",
        hour=18,
        minute=0,
        timezone="Europe/Kyiv"
    )
    scheduler.start()

async def auto_send_summary():
    if not weekly_messages:
        return

    summary = generate_summary()

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ —É –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏, —è–∫—ñ –∑–±–µ—Ä—ñ–≥–∞–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    unique_chats = set()
    for _, _, timestamp in weekly_messages:
        # –ü—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ –¥–æ–¥–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è chat_id –¥–æ weekly_messages
        pass

    # –ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞–π –≤ –æ–¥–Ω—É —Ç–µ—Å—Ç–æ–≤—É –≥—Ä—É–ø—É:
    test_chat_id = os.getenv("TEST_CHAT_ID")
    if test_chat_id:
        await bot.send_message(chat_id=test_chat_id, text=summary)

    clear_old_messages()

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    logger.info("üöÄ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É—î...")
    setup_scheduler()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
