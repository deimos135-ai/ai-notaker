import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
import asyncio

BOT_TOKEN = os.getenv("BOT_TOKEN")

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot and Dispatcher
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# Handlers
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π. –ù–∞–¥—Å–∏–ª–∞–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def handle_group_message(message: Message):
    logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message.text}")
    # TODO: –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ –±–∞–∑—É / —Ñ–∞–π–ª
    # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ª–æ–≥—É–≤–∞—Ç–∏–º–µ –≤ CSV –∞–±–æ SQLite

# Startup
async def on_startup(bot: Bot):
    logger.info("üöÄ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É—î...")

# Shutdown
async def on_shutdown(bot: Bot):
    logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")

# Main
async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
