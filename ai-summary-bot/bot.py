import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
from aiogram import F

from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    logger.info(f"Start command from chat_id: {message.chat.id}")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —ñ –≤–∂–µ –ø—Ä–∞—Ü—é—é!")

@dp.message(Command("summary"))
async def summary_handler(message: Message):
    logger.info(f"Summary –∑–∞–ø–∏—Ç –≤—ñ–¥ chat_id: {message.chat.id}")
    await message.answer("üìù –¢—É—Ç –±—É–¥–µ summary. –ê–ª–µ –Ω–∞—Ä–∞–∑—ñ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")

# –Ø–∫—â–æ —Ö–æ—á–µ—à —Ä–µ–∞–∫—Ü—ñ—é –Ω–∞ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π
# @dp.message(F.text)
# async def echo_handler(message: Message):
#     logger.info(f"Echo –≤—ñ–¥ chat_id: {message.chat.id} ‚Äî {message.text}")
#     await message.answer(f"‚úÖ –í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

async def main():
    logger.info("üöÄ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É—î...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
