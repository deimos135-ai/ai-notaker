import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
import openai
from datetime import datetime
from db import save_message, get_weekly_messages  # SQLite –ª–æ–≥—ñ–∫–∞

# üîê –ö–ª—é—á—ñ
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# üîß –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# üëã –°—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫ —ñ –ø—ñ–¥—Å—É–º–∫—ñ–≤. –ù–∞–ø–∏—à–∏ —â–æ—Å—å –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ /summary")


# üìã –†–µ–∑—é–º–µ
@dp.message(Command("summary"))
async def summary_handler(message: Message):
    logger.info(f"–ó–∞–ø–∏—Ç /summary —É —á–∞—Ç—ñ {message.chat.id}")

    try:
        chat_id = message.chat.id
        messages = get_weekly_messages(chat_id=chat_id)

        if not messages:
            await message.answer("üì≠ –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Ä–µ–∑—é–º–µ.")
            return

        text_block = "\n".join([f"{m[1]}" for m in messages if m[1]])
        prompt = (
            "–ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–µ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–µ —Ä–µ–∑—é–º–µ —Ü–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:\n\n"
            + text_block
        )

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.5,
        )

        summary = response.choices[0].message.content.strip()
        await message.answer(f"üìã <b>Summary:</b>\n{summary}")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ summary_handler: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–µ–∑—é–º–µ.")


# üíæ –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)
@dp.message(F.text)
async def store_message(message: Message):
    logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message.text}")
    timestamp = datetime.utcnow().isoformat()
    save_message(
        chat_id=message.chat.id,
        username=message.from_user.username if message.from_user else None,
        text=message.text,
        timestamp=timestamp
    )


# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    logger.info("üöÄ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É—î...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
